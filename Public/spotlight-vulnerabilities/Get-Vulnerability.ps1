function Get-Vulnerability {
<#
.SYNOPSIS
    Search for Vulnerabilities in your environment
.DESCRIPTION
    Requires spotlight-vulnerabilities:read
.PARAMETER ID
    Retrieve detailed information for specific host identifiers
.PARAMETER FILTER
    Filter items using a query in Falcon Query Language (FQL)
.PARAMETER LIMIT
    The number of items to return in this response
.PARAMETER SORT
    Sort vulnerabilities by their properties
.PARAMETER AFTER
    A pagination token used with the limit parameter to manage pagination of results
.PARAMETER DETAILED
    Retrieve detailed information
.PARAMETER ALL
    Repeat requests until all available results are retrieved
.EXAMPLE
    PS> Get-CsVulnerability -Filter ("created_timestamp:>'" + (((Get-Date).AddHours(-24)).ToUniversalTime()).ToString('yyyy-MM-ddTHH:mm:ssZ') + "'")
    Returns ids for all vulnerabilities that were opened in the last 24 hours
.EXAMPLE
    PS> Get-CsVulnerability -Filter "aid:'host_id_1'" -Detailed
    Returns detailed vulnerability information for 'host_id_1'
.LINK
    https://assets.falcon.crowdstrike.com/support/api/swagger.html#/spotlight-vulnerabilities
#>
    [CmdletBinding(DefaultParameterSetName = 'default')]
    [OutputType()]
    param(
        [Parameter(ParameterSetName = 'id', Mandatory = $true)]
        [array] $Id,

        [Parameter(ParameterSetName = 'default', Mandatory = $true)]
        [string] $Filter,

        [Parameter(ParameterSetName = 'default')]
        [ValidateRange(1, 500)]
        [int] $Limit,

        [Parameter(ParameterSetName = 'default')]
        [string] $Sort,

        [Parameter(ParameterSetName = 'default')]
        [string] $After,

        [Parameter(ParameterSetName = 'default')]
        [switch] $Detailed,

        [Parameter(ParameterSetName = 'default')]
        [switch] $All
    )
    process {
        $LoopParam = @{ }

        $Param = @{
            Uri    = '/spotlight/queries/vulnerabilities/v1?'
            Method = 'get'
            Header = @{
                'content-type' = 'application/json'
            }
        }
        switch ($PSBoundParameters.Keys) {
            'Filter' {
                $Param.Uri += '&filter=' + $Filter
                $LoopParam['Filter'] = $Filter
            }
            'Limit' {
                $Param.Uri += '&limit=' + [string] $Limit
                $LoopParam['Limit'] = $Limit
            }
            'Sort' {
                $Param.Uri += '&sort=' + $Sort
                $LoopParam['Sort'] = $Sort
            }
            'After' {
                $Param.Uri += '&after=' + $After
            }
            'Verbose' {
                $Param['Verbose'] = $true
                $LoopParam['Verbose'] = $true
            }
            'Debug' {
                $Param['Debug'] = $true
                $LoopParam['Debug'] = $true
            }
        }
        if ($All) {
            if ($Detailed) {
                Invoke-Loop -Command $MyInvocation.MyCommand.Name -Param $LoopParam -Detailed
            } else {
                Invoke-Loop -Command $MyInvocation.MyCommand.Name -Param $LoopParam
            }
        } elseif ($Id) {
            Split-Array -Uri $Param.Uri -Id $Id | ForEach-Object {
                $Param.Uri = '/spotlight/entities/vulnerabilities/v2?ids=' + ($_ -join '&ids=')

                Invoke-Api @Param
            }
        } else {
            $Request = Invoke-Api @Param

            if ($Detailed -and $Request.resources) {
                Split-Array -Uri $Param.Uri -Id $Request.resources | ForEach-Object {
                    $Param.Uri = '/spotlight/entities/vulnerabilities/v2?ids=' + ($_ -join '&ids=')
    
                    Invoke-Api @Param
                }
            } else {
                $Request
            }
        }
    }
}